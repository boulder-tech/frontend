"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abitype";
exports.ids = ["vendor-chunks/abitype"];
exports.modules = {

/***/ "(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs":
/*!******************************************************!*\
  !*** ./node_modules/abitype/dist/chunk-NHABU752.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __publicField: () => (/* binding */ __publicField)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLU5IQUJVNzUyLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0M7SUFDN0JILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7SUFDL0QsT0FBT0E7QUFDVDtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLU5IQUJVNzUyLm1qcz9lMDlhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IHtcbiAgX19wdWJsaWNGaWVsZFxufTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs":
/*!******************************************************!*\
  !*** ./node_modules/abitype/dist/chunk-WP7KDV47.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesRegex: () => (/* binding */ bytesRegex),\n/* harmony export */   execTyped: () => (/* binding */ execTyped),\n/* harmony export */   integerRegex: () => (/* binding */ integerRegex),\n/* harmony export */   isTupleRegex: () => (/* binding */ isTupleRegex)\n/* harmony export */ });\n// src/regex.ts\nfunction execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\nvar bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\nvar integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nvar isTupleRegex = /^\\(.+?\\).*?$/;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLVdQN0tEVjQ3Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsZUFBZTtBQUNmLFNBQVNBLFVBQVVDLEtBQUssRUFBRUMsTUFBTTtJQUM5QixNQUFNQyxRQUFRRixNQUFNRyxJQUFJLENBQUNGO0lBQ3pCLE9BQU9DLE9BQU9FO0FBQ2hCO0FBQ0EsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxlQUFlO0FBQ25CLElBQUlDLGVBQWU7QUFPakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2h1bmstV1A3S0RWNDcubWpzPzliOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3JlZ2V4LnRzXG5mdW5jdGlvbiBleGVjVHlwZWQocmVnZXgsIHN0cmluZykge1xuICBjb25zdCBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuIG1hdGNoPy5ncm91cHM7XG59XG52YXIgYnl0ZXNSZWdleCA9IC9eYnl0ZXMoWzEtOV18MVswLTldfDJbMC05XXwzWzAtMl0pPyQvO1xudmFyIGludGVnZXJSZWdleCA9IC9edT9pbnQoOHwxNnwyNHwzMnw0MHw0OHw1Nnw2NHw3Mnw4MHw4OHw5NnwxMDR8MTEyfDEyMHwxMjh8MTM2fDE0NHwxNTJ8MTYwfDE2OHwxNzZ8MTg0fDE5MnwyMDB8MjA4fDIxNnwyMjR8MjMyfDI0MHwyNDh8MjU2KT8kLztcbnZhciBpc1R1cGxlUmVnZXggPSAvXlxcKC4rP1xcKS4qPyQvO1xuXG5leHBvcnQge1xuICBleGVjVHlwZWQsXG4gIGJ5dGVzUmVnZXgsXG4gIGludGVnZXJSZWdleCxcbiAgaXNUdXBsZVJlZ2V4XG59O1xuIl0sIm5hbWVzIjpbImV4ZWNUeXBlZCIsInJlZ2V4Iiwic3RyaW5nIiwibWF0Y2giLCJleGVjIiwiZ3JvdXBzIiwiYnl0ZXNSZWdleCIsImludGVnZXJSZWdleCIsImlzVHVwbGVSZWdleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/abitype/dist/index.mjs":
/*!*********************************************!*\
  !*** ./node_modules/abitype/dist/index.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError),\n/* harmony export */   narrow: () => (/* binding */ narrow),\n/* harmony export */   parseAbi: () => (/* binding */ parseAbi),\n/* harmony export */   parseAbiItem: () => (/* binding */ parseAbiItem),\n/* harmony export */   parseAbiParameter: () => (/* binding */ parseAbiParameter2),\n/* harmony export */   parseAbiParameters: () => (/* binding */ parseAbiParameters)\n/* harmony export */ });\n/* harmony import */ var _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WP7KDV47.mjs */ \"(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs\");\n/* harmony import */ var _chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-NHABU752.mjs */ \"(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs\");\n\n\n// package.json\nvar name = \"abitype\";\nvar version = \"0.7.1\";\n// src/errors.ts\nvar BaseError = class extends Error {\n    constructor(shortMessage, args = {}){\n        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\n        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsPath ? [\n                `Docs: https://abitype.dev${docsPath}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            `Version: ${name}@${version}`\n        ].join(\"\\n\");\n        super(message);\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"details\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"docsPath\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"metaMessages\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"shortMessage\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"name\", \"AbiTypeError\");\n        if (args.cause) this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n};\n// src/narrow.ts\nfunction narrow(value) {\n    return value;\n}\n// src/human-readable/runtime/signatures.ts\nvar errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n    return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(errorSignatureRegex, signature);\n}\nvar eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n    return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(eventSignatureRegex, signature);\n}\nvar functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n    return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(functionSignatureRegex, signature);\n}\nvar structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n    return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(structSignatureRegex, signature);\n}\nvar constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n    return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(constructorSignatureRegex, signature);\n}\nvar fallbackSignatureRegex = /^fallback\\(\\)$/;\nfunction isFallbackSignature(signature) {\n    return fallbackSignatureRegex.test(signature);\n}\nvar receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n    return receiveSignatureRegex.test(signature);\n}\nvar modifiers = /* @__PURE__ */ new Set([\n    \"memory\",\n    \"indexed\",\n    \"storage\",\n    \"calldata\"\n]);\nvar eventModifiers = /* @__PURE__ */ new Set([\n    \"indexed\"\n]);\nvar functionModifiers = /* @__PURE__ */ new Set([\n    \"calldata\",\n    \"memory\",\n    \"storage\"\n]);\n// src/human-readable/runtime/cache.ts\nfunction getParameterCacheKey(param, type) {\n    if (type) return `${type}:${param}`;\n    return param;\n}\nvar parameterCache = /* @__PURE__ */ new Map([\n    // Unnamed\n    [\n        \"address\",\n        {\n            type: \"address\"\n        }\n    ],\n    [\n        \"bool\",\n        {\n            type: \"bool\"\n        }\n    ],\n    [\n        \"bytes\",\n        {\n            type: \"bytes\"\n        }\n    ],\n    [\n        \"bytes32\",\n        {\n            type: \"bytes32\"\n        }\n    ],\n    [\n        \"int\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"int256\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"string\",\n        {\n            type: \"string\"\n        }\n    ],\n    [\n        \"uint\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    [\n        \"uint8\",\n        {\n            type: \"uint8\"\n        }\n    ],\n    [\n        \"uint16\",\n        {\n            type: \"uint16\"\n        }\n    ],\n    [\n        \"uint24\",\n        {\n            type: \"uint24\"\n        }\n    ],\n    [\n        \"uint32\",\n        {\n            type: \"uint32\"\n        }\n    ],\n    [\n        \"uint64\",\n        {\n            type: \"uint64\"\n        }\n    ],\n    [\n        \"uint96\",\n        {\n            type: \"uint96\"\n        }\n    ],\n    [\n        \"uint112\",\n        {\n            type: \"uint112\"\n        }\n    ],\n    [\n        \"uint160\",\n        {\n            type: \"uint160\"\n        }\n    ],\n    [\n        \"uint192\",\n        {\n            type: \"uint192\"\n        }\n    ],\n    [\n        \"uint256\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    // Named\n    [\n        \"address owner\",\n        {\n            type: \"address\",\n            name: \"owner\"\n        }\n    ],\n    [\n        \"address to\",\n        {\n            type: \"address\",\n            name: \"to\"\n        }\n    ],\n    [\n        \"bool approved\",\n        {\n            type: \"bool\",\n            name: \"approved\"\n        }\n    ],\n    [\n        \"bytes _data\",\n        {\n            type: \"bytes\",\n            name: \"_data\"\n        }\n    ],\n    [\n        \"bytes data\",\n        {\n            type: \"bytes\",\n            name: \"data\"\n        }\n    ],\n    [\n        \"bytes signature\",\n        {\n            type: \"bytes\",\n            name: \"signature\"\n        }\n    ],\n    [\n        \"bytes32 hash\",\n        {\n            type: \"bytes32\",\n            name: \"hash\"\n        }\n    ],\n    [\n        \"bytes32 r\",\n        {\n            type: \"bytes32\",\n            name: \"r\"\n        }\n    ],\n    [\n        \"bytes32 root\",\n        {\n            type: \"bytes32\",\n            name: \"root\"\n        }\n    ],\n    [\n        \"bytes32 s\",\n        {\n            type: \"bytes32\",\n            name: \"s\"\n        }\n    ],\n    [\n        \"string name\",\n        {\n            type: \"string\",\n            name: \"name\"\n        }\n    ],\n    [\n        \"string symbol\",\n        {\n            type: \"string\",\n            name: \"symbol\"\n        }\n    ],\n    [\n        \"string tokenURI\",\n        {\n            type: \"string\",\n            name: \"tokenURI\"\n        }\n    ],\n    [\n        \"uint tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint8 v\",\n        {\n            type: \"uint8\",\n            name: \"v\"\n        }\n    ],\n    [\n        \"uint256 balance\",\n        {\n            type: \"uint256\",\n            name: \"balance\"\n        }\n    ],\n    [\n        \"uint256 tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint256 value\",\n        {\n            type: \"uint256\",\n            name: \"value\"\n        }\n    ],\n    // Indexed\n    [\n        \"event:address indexed from\",\n        {\n            type: \"address\",\n            name: \"from\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:address indexed to\",\n        {\n            type: \"address\",\n            name: \"to\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint256 indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ]\n]);\n// src/human-readable/runtime/utils.ts\nfunction parseSignature(signature, structs = {}) {\n    if (isFunctionSignature(signature)) {\n        const match = execFunctionSignature(signature);\n        if (!match) throw new BaseError(\"Invalid function signature.\", {\n            details: signature\n        });\n        const inputParams = splitParameters(match.parameters);\n        const inputs = [];\n        const inputLength = inputParams.length;\n        for(let i = 0; i < inputLength; i++){\n            inputs.push(parseAbiParameter(inputParams[i], {\n                modifiers: functionModifiers,\n                structs,\n                type: \"function\"\n            }));\n        }\n        const outputs = [];\n        if (match.returns) {\n            const outputParams = splitParameters(match.returns);\n            const outputLength = outputParams.length;\n            for(let i = 0; i < outputLength; i++){\n                outputs.push(parseAbiParameter(outputParams[i], {\n                    modifiers: functionModifiers,\n                    structs,\n                    type: \"function\"\n                }));\n            }\n        }\n        return {\n            name: match.name,\n            type: \"function\",\n            stateMutability: match.stateMutability ?? \"nonpayable\",\n            inputs,\n            outputs\n        };\n    }\n    if (isEventSignature(signature)) {\n        const match = execEventSignature(signature);\n        if (!match) throw new BaseError(\"Invalid event signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                modifiers: eventModifiers,\n                structs,\n                type: \"event\"\n            }));\n        }\n        return {\n            name: match.name,\n            type: \"event\",\n            inputs: abiParameters\n        };\n    }\n    if (isErrorSignature(signature)) {\n        const match = execErrorSignature(signature);\n        if (!match) throw new BaseError(\"Invalid error signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                structs,\n                type: \"error\"\n            }));\n        }\n        return {\n            name: match.name,\n            type: \"error\",\n            inputs: abiParameters\n        };\n    }\n    if (isConstructorSignature(signature)) {\n        const match = execConstructorSignature(signature);\n        if (!match) throw new BaseError(\"Invalid constructor signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                structs,\n                type: \"constructor\"\n            }));\n        }\n        return {\n            type: \"constructor\",\n            stateMutability: match.stateMutability ?? \"nonpayable\",\n            inputs: abiParameters\n        };\n    }\n    if (isFallbackSignature(signature)) return {\n        type: \"fallback\"\n    };\n    if (isReceiveSignature(signature)) return {\n        type: \"receive\",\n        stateMutability: \"payable\"\n    };\n    throw new BaseError(\"Unknown signature.\", {\n        details: signature\n    });\n}\nvar abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n    const parameterCacheKey = getParameterCacheKey(param, options?.type);\n    if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);\n    const isTuple = _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.isTupleRegex.test(param);\n    const match = (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n    if (!match) throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param\n    });\n    if (match.name && isSolidityKeyword(match.name)) throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param,\n        metaMessages: [\n            `\"${match.name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\n        ]\n    });\n    const name2 = match.name ? {\n        name: match.name\n    } : {};\n    const indexed = match.modifier === \"indexed\" ? {\n        indexed: true\n    } : {};\n    const structs = options?.structs ?? {};\n    let type;\n    let components = {};\n    if (isTuple) {\n        type = \"tuple\";\n        const params = splitParameters(match.type);\n        const components_ = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            components_.push(parseAbiParameter(params[i], {\n                structs\n            }));\n        }\n        components = {\n            components: components_\n        };\n    } else if (match.type in structs) {\n        type = \"tuple\";\n        components = {\n            components: structs[match.type]\n        };\n    } else if (dynamicIntegerRegex.test(match.type)) {\n        type = `${match.type}256`;\n    } else {\n        type = match.type;\n        if (!(options?.type === \"struct\") && !isSolidityType(type)) throw new BaseError(\"Unknown type.\", {\n            metaMessages: [\n                `Type \"${type}\" is not a valid ABI type.`\n            ]\n        });\n    }\n    if (match.modifier) {\n        if (!options?.modifiers?.has?.(match.modifier)) throw new BaseError(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`\n            ]\n        });\n        if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`,\n                `Data location can only be specified for array, struct, or mapping types, but \"${match.modifier}\" was given.`\n            ]\n        });\n    }\n    const abiParameter = {\n        type: `${type}${match.array ?? \"\"}`,\n        ...name2,\n        ...indexed,\n        ...components\n    };\n    parameterCache.set(parameterCacheKey, abiParameter);\n    return abiParameter;\n}\nfunction splitParameters(params, result = [], current = \"\", depth = 0) {\n    if (params === \"\") {\n        if (current === \"\") return result;\n        if (depth !== 0) throw new BaseError(\"Unbalanced parentheses.\", {\n            metaMessages: [\n                `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\n            ],\n            details: `Depth \"${depth}\"`\n        });\n        return [\n            ...result,\n            current.trim()\n        ];\n    }\n    const length = params.length;\n    for(let i = 0; i < length; i++){\n        const char = params[i];\n        const tail = params.slice(i + 1);\n        switch(char){\n            case \",\":\n                return depth === 0 ? splitParameters(tail, [\n                    ...result,\n                    current.trim()\n                ]) : splitParameters(tail, result, `${current}${char}`, depth);\n            case \"(\":\n                return splitParameters(tail, result, `${current}${char}`, depth + 1);\n            case \")\":\n                return splitParameters(tail, result, `${current}${char}`, depth - 1);\n            default:\n                return splitParameters(tail, result, `${current}${char}`, depth);\n        }\n    }\n    return [];\n}\nfunction isSolidityType(type) {\n    return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.bytesRegex.test(type) || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.integerRegex.test(type);\n}\nvar protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name2) {\n    return name2 === \"address\" || name2 === \"bool\" || name2 === \"function\" || name2 === \"string\" || name2 === \"tuple\" || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.bytesRegex.test(name2) || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.integerRegex.test(name2) || protectedKeywordsRegex.test(name2);\n}\nfunction isValidDataLocation(type, isArray) {\n    return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n}\n// src/human-readable/runtime/structs.ts\nfunction parseStructs(signatures) {\n    const shallowStructs = {};\n    const signaturesLength = signatures.length;\n    for(let i = 0; i < signaturesLength; i++){\n        const signature = signatures[i];\n        if (!isStructSignature(signature)) continue;\n        const match = execStructSignature(signature);\n        if (!match) throw new BaseError(\"Invalid struct signature.\", {\n            details: signature\n        });\n        const properties = match.properties.split(\";\");\n        const components = [];\n        const propertiesLength = properties.length;\n        for(let k = 0; k < propertiesLength; k++){\n            const property = properties[k];\n            const trimmed = property.trim();\n            if (!trimmed) continue;\n            const abiParameter = parseAbiParameter(trimmed, {\n                type: \"struct\"\n            });\n            components.push(abiParameter);\n        }\n        if (!components.length) throw new BaseError(\"Invalid struct signature.\", {\n            details: signature,\n            metaMessages: [\n                \"No properties exist.\"\n            ]\n        });\n        shallowStructs[match.name] = components;\n    }\n    const resolvedStructs = {};\n    const entries = Object.entries(shallowStructs);\n    const entriesLength = entries.length;\n    for(let i = 0; i < entriesLength; i++){\n        const [name2, parameters] = entries[i];\n        resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);\n    }\n    return resolvedStructs;\n}\nvar typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {\n    const components = [];\n    const length = abiParameters.length;\n    for(let i = 0; i < length; i++){\n        const abiParameter = abiParameters[i];\n        const isTuple = _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.isTupleRegex.test(abiParameter.type);\n        if (isTuple) components.push(abiParameter);\n        else {\n            const match = (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(typeWithoutTupleRegex, abiParameter.type);\n            if (!match?.type) throw new BaseError(\"Invalid ABI parameter.\", {\n                details: JSON.stringify(abiParameter, null, 2),\n                metaMessages: [\n                    \"ABI parameter type is invalid.\"\n                ]\n            });\n            const { array, type } = match;\n            if (type in structs) {\n                if (ancestors.has(type)) throw new BaseError(\"Circular reference detected.\", {\n                    metaMessages: [\n                        `Struct \"${type}\" is a circular reference.`\n                    ]\n                });\n                components.push({\n                    ...abiParameter,\n                    type: `tuple${array ?? \"\"}`,\n                    components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([\n                        ...ancestors,\n                        type\n                    ]))\n                });\n            } else {\n                if (isSolidityType(type)) components.push(abiParameter);\n                else throw new BaseError(\"Unknown type.\", {\n                    metaMessages: [\n                        `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\n                    ]\n                });\n            }\n        }\n    }\n    return components;\n}\n// src/human-readable/parseAbi.ts\nfunction parseAbi(signatures) {\n    const structs = parseStructs(signatures);\n    const abi = [];\n    const length = signatures.length;\n    for(let i = 0; i < length; i++){\n        const signature = signatures[i];\n        if (isStructSignature(signature)) continue;\n        abi.push(parseSignature(signature, structs));\n    }\n    return abi;\n}\n// src/human-readable/parseAbiItem.ts\nfunction parseAbiItem(signature) {\n    let abiItem;\n    if (typeof signature === \"string\") abiItem = parseSignature(signature);\n    else {\n        const structs = parseStructs(signature);\n        const length = signature.length;\n        for(let i = 0; i < length; i++){\n            const signature_ = signature[i];\n            if (isStructSignature(signature_)) continue;\n            abiItem = parseSignature(signature_, structs);\n            break;\n        }\n    }\n    if (!abiItem) throw new BaseError(\"Failed to parse ABI item.\", {\n        details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiitem-1\"\n    });\n    return abiItem;\n}\n// src/human-readable/parseAbiParameter.ts\nfunction parseAbiParameter2(param) {\n    let abiParameter;\n    if (typeof param === \"string\") abiParameter = parseAbiParameter(param, {\n        modifiers\n    });\n    else {\n        const structs = parseStructs(param);\n        const length = param.length;\n        for(let i = 0; i < length; i++){\n            const signature = param[i];\n            if (isStructSignature(signature)) continue;\n            abiParameter = parseAbiParameter(signature, {\n                modifiers,\n                structs\n            });\n            break;\n        }\n    }\n    if (!abiParameter) throw new BaseError(\"Failed to parse ABI parameter.\", {\n        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiparameter-1\"\n    });\n    return abiParameter;\n}\n// src/human-readable/parseAbiParameters.ts\nfunction parseAbiParameters(params) {\n    const abiParameters = [];\n    if (typeof params === \"string\") {\n        const parameters = splitParameters(params);\n        const length = parameters.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(parameters[i], {\n                modifiers\n            }));\n        }\n    } else {\n        const structs = parseStructs(params);\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            const signature = params[i];\n            if (isStructSignature(signature)) continue;\n            const parameters = splitParameters(signature);\n            const length2 = parameters.length;\n            for(let k = 0; k < length2; k++){\n                abiParameters.push(parseAbiParameter(parameters[k], {\n                    modifiers,\n                    structs\n                }));\n            }\n        }\n    }\n    if (abiParameters.length === 0) throw new BaseError(\"Failed to parse ABI parameters.\", {\n        details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiparameters-1\"\n    });\n    return abiParameters;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/index.mjs\n");

/***/ })

};
;