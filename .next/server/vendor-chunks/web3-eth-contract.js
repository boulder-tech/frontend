"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-contract";
exports.ids = ["vendor-chunks/web3-eth-contract"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/contract.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* binding */ Contract)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst contractSubscriptions = {\n    logs: _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription,\n    newHeads: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription,\n    newBlockHeaders: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription\n};\n/**\n * The class designed to interact with smart contracts on the Ethereum blockchain.\n */ class Contract extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context {\n    constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat){\n        var _a, _b, _c;\n        // eslint-disable-next-line no-nested-ternary\n        const options = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isContractInitOptions)(addressOrOptionsOrContext) ? addressOrOptionsOrContext : (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isContractInitOptions)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n        let contractContext;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(addressOrOptionsOrContext)) {\n            contractContext = addressOrOptionsOrContext;\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(optionsOrContextOrReturnFormat)) {\n            contractContext = optionsOrContextOrReturnFormat;\n        } else {\n            contractContext = contextOrReturnFormat;\n        }\n        let provider;\n        if (typeof addressOrOptionsOrContext === \"object\" && \"provider\" in addressOrOptionsOrContext) {\n            provider = addressOrOptionsOrContext.provider;\n        } else if (typeof optionsOrContextOrReturnFormat === \"object\" && \"provider\" in optionsOrContextOrReturnFormat) {\n            provider = optionsOrContextOrReturnFormat.provider;\n        } else if (typeof contextOrReturnFormat === \"object\" && \"provider\" in contextOrReturnFormat) {\n            provider = contextOrReturnFormat.provider;\n        } else {\n            provider = Contract.givenProvider;\n        }\n        super(Object.assign(Object.assign({}, contractContext), {\n            provider,\n            registeredSubscriptions: contractSubscriptions\n        }));\n        /**\n         * Set to true if you want contracts' defaults to sync with global defaults.\n         */ this.syncWithContext = false;\n        this._functions = {};\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.data) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.input) && this.config.contractDataInputFill !== \"both\") throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractTransactionDataAndInputError({\n            data: options.data,\n            input: options.input\n        });\n        this._overloadedMethodAbis = new Map();\n        // eslint-disable-next-line no-nested-ternary\n        const returnDataFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(contextOrReturnFormat) ? contextOrReturnFormat : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT;\n        const address = typeof addressOrOptionsOrContext === \"string\" ? addressOrOptionsOrContext : undefined;\n        this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n        this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(address)) {\n            this._parseAndSetAddress(address, returnDataFormat);\n        }\n        this.options = {\n            address,\n            jsonInterface: this._jsonInterface,\n            gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n            gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n            from: options === null || options === void 0 ? void 0 : options.from,\n            input: options === null || options === void 0 ? void 0 : options.input,\n            data: options === null || options === void 0 ? void 0 : options.data\n        };\n        this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            this.subscribeToContextEvents(contractContext);\n        }\n        Object.defineProperty(this.options, \"address\", {\n            set: (value)=>this._parseAndSetAddress(value, returnDataFormat),\n            get: ()=>this._address\n        });\n        Object.defineProperty(this.options, \"jsonInterface\", {\n            set: (value)=>this._parseAndSetJsonInterface(value, returnDataFormat),\n            get: ()=>this._jsonInterface\n        });\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            contractContext.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                this.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n    /**\n     * Subscribe to an event.\n     *\n     * ```ts\n     * await myContract.events.MyEvent([options])\n     * ```\n     *\n     * There is a special event `allEvents` that can be used to subscribe all events.\n     *\n     * ```ts\n     * await myContract.events.allEvents([options])\n     * ```\n     *\n     * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n     */ get events() {\n        return this._events;\n    }\n    /**\n     * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n     *\n     * The methods of this smart contract are available through:\n     *\n     * The name: `myContract.methods.myMethod(123)`\n     * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n     * The signature `myContract.methods['0x58cf5f10'](123)`\n     *\n     * This allows calling functions with same name but different parameters from the JavaScript contract object.\n     *\n     * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n     *\n     * ```ts\n     * // calling a method\n     * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using a promise\n     * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using the events\n     * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     * sendObject.on('transactionHash', function(hash){\n     *   ...\n     * });\n     * sendObject.on('receipt', function(receipt){\n     *   ...\n     * });\n     * sendObject.on('confirmation', function(confirmationNumber, receipt){\n     *   ...\n     * });\n     * sendObject.on('error', function(error, receipt) {\n     *   ...\n     * });\n     * ```\n     *\n     * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n     */ get methods() {\n        return this._methods;\n    }\n    /**\n     * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n     *\n     * @returns - The new contract instance.\n     *\n     * ```ts\n     * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n     *\n     * const contract2 = contract1.clone();\n     * contract2.options.address = address2;\n     *\n     * (contract1.options.address !== contract2.options.address);\n     * > true\n     * ```\n     */ clone() {\n        let newContract;\n        if (this.options.address) {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], this.options.address, {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        } else {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        }\n        if (this.context) newContract.subscribeToContextEvents(this.context);\n        return newContract;\n    }\n    /**\n     * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n     *\n     * ```ts\n     * myContract.deploy({\n     *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * }, function(error, transactionHash){ ... })\n     * .on('error', function(error){ ... })\n     * .on('transactionHash', function(transactionHash){ ... })\n     * .on('receipt', function(receipt){\n     *  console.log(receipt.contractAddress) // contains the new contract address\n     * })\n     * .on('confirmation', function(confirmationNumber, receipt){ ... })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // When the data is already set as an option to the contract itself\n     * myContract.options.data = '0x12345...';\n     *\n     * myContract.deploy({\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // Simply encoding\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .encodeABI();\n     * > '0x12345...0000012345678765432'\n     *\n     *\n     * // Gas estimation\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .estimateGas(function(err, gas){\n     *   console.log(gas);\n     * });\n     * ```\n     *\n     * @returns - The transaction object\n     */ deploy(deployOptions) {\n        var _a, _b, _c;\n        let abi = this._jsonInterface.find((j)=>j.type === \"constructor\");\n        if (!abi) {\n            abi = {\n                type: \"constructor\",\n                inputs: [],\n                stateMutability: \"\"\n            };\n        }\n        const _input = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        const _data = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        if ((!_input || _input.trim() === \"0x\") && (!_data || _data.trim() === \"0x\")) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"contract creation without any data provided.\");\n        }\n        const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];\n        const contractOptions = Object.assign(Object.assign({}, this.options), {\n            input: _input,\n            data: _data\n        });\n        const deployData = _input !== null && _input !== void 0 ? _input : _data;\n        return {\n            arguments: args,\n            send: (options)=>{\n                const modifiedOptions = Object.assign({}, options);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);\n            },\n            estimateGas: (options, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT)=>__awaiter(this, void 0, void 0, function*() {\n                    const modifiedOptions = Object.assign({}, options);\n                    return this._contractMethodEstimateGas({\n                        abi: abi,\n                        params: args,\n                        returnFormat,\n                        options: modifiedOptions,\n                        contractOptions\n                    });\n                }),\n            encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(abi, args, (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n                    format: \"bytes\"\n                }, deployData, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT))\n        };\n    }\n    getPastEvents(param1, param2, param3) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const eventName = typeof param1 === \"string\" ? param1 : web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS;\n            const options = // eslint-disable-next-line no-nested-ternary\n            typeof param1 !== \"string\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : {};\n            // eslint-disable-next-line no-nested-ternary\n            const returnFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT;\n            const abi = eventName === \"allEvents\" || eventName === web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS ? web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI : this._jsonInterface.find((j)=>\"name\" in j && j.name === eventName);\n            if (!abi) {\n                throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Event ${eventName} not found.`);\n            }\n            const { fromBlock, toBlock, topics, address } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, options !== null && options !== void 0 ? options : {});\n            const logs = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.getLogs)(this, {\n                fromBlock,\n                toBlock,\n                topics,\n                address\n            }, returnFormat);\n            const decodedLogs = logs.map((log)=>typeof log === \"string\" ? log : (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.decodeEventABI)(abi, log, this._jsonInterface, returnFormat));\n            const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n            const filterKeys = Object.keys(filter);\n            if (filterKeys.length > 0) {\n                return decodedLogs.filter((log)=>{\n                    if (typeof log === \"string\") return true;\n                    return filterKeys.every((key)=>{\n                        var _a;\n                        if (Array.isArray(filter[key])) {\n                            return filter[key].some((v)=>String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n                        }\n                        const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter((input)=>input.name === key)[0];\n                        if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === \"string\") {\n                            const hashedIndexedString = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.keccak256)(filter[key]);\n                            if (hashedIndexedString === String(log.returnValues[key])) return true;\n                        }\n                        return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n                    });\n                });\n            }\n            return decodedLogs;\n        });\n    }\n    _parseAndSetAddress(value, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        this._address = value ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.toChecksumAddress)((0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"address\"\n        }, value, returnFormat)) : value;\n    }\n    _parseAndSetJsonInterface(abis, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        var _a, _b, _c, _d, _e;\n        this._functions = {};\n        this._methods = {};\n        this._events = {};\n        let result = [];\n        const functionsAbi = abis.filter((abi)=>abi.type !== \"error\");\n        const errorsAbi = abis.filter((abi)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiErrorFragment)(abi));\n        for (const a of functionsAbi){\n            const abi = Object.assign(Object.assign({}, a), {\n                signature: \"\"\n            });\n            if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiFunctionFragment)(abi)) {\n                const methodName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const methodSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeFunctionSignature)(methodName);\n                abi.signature = methodSignature;\n                // make constant and payable backwards compatible\n                abi.constant = (_b = (_a = abi.stateMutability === \"view\") !== null && _a !== void 0 ? _a : abi.stateMutability === \"pure\") !== null && _b !== void 0 ? _b : abi.constant;\n                abi.payable = (_c = abi.stateMutability === \"payable\") !== null && _c !== void 0 ? _c : abi.payable;\n                this._overloadedMethodAbis.set(abi.name, [\n                    ...(_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : [],\n                    abi\n                ]);\n                const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];\n                const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n                this._functions[methodName] = {\n                    signature: methodSignature,\n                    method: contractMethod\n                };\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[abi.name] = this._functions[methodName].method;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodName] = this._functions[methodName].method;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodSignature] = this._functions[methodName].method;\n            } else if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiEventFragment)(abi)) {\n                const eventName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const eventSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeEventSignature)(eventName);\n                const event = this._createContractEvent(abi, returnFormat);\n                abi.signature = eventSignature;\n                if (!(eventName in this._events) || abi.name === \"bound\") {\n                    // It's a private type and we don't want to expose it and no need to check\n                    this._events[eventName] = event;\n                }\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[abi.name] = event;\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[eventSignature] = event;\n            }\n            result = [\n                ...result,\n                abi\n            ];\n        }\n        this._events.allEvents = this._createContractEvent(web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI, returnFormat);\n        this._jsonInterface = [\n            ...result\n        ];\n        this._errorsInterface = errorsAbi;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _getAbiParams(abi, params) {\n        var _a;\n        try {\n            return web3_validator__WEBPACK_IMPORTED_MODULE_6__.utils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n        } catch (error) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n        }\n    }\n    _createContractMethod(abiArr, errorsAbis) {\n        const abi = abiArr[abiArr.length - 1];\n        return (...params)=>{\n            var _a, _b;\n            let abiParams;\n            const abis = (_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : [];\n            let methodAbi = abis[0];\n            const internalErrorsAbis = errorsAbis;\n            const arrayOfAbis = abis.filter((_abi)=>{\n                var _a;\n                return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n            });\n            if (abis.length === 1 || arrayOfAbis.length === 0) {\n                abiParams = this._getAbiParams(methodAbi, params);\n                web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate((_b = abi.inputs) !== null && _b !== void 0 ? _b : [], abiParams);\n            } else {\n                const errors = [];\n                for (const _abi of arrayOfAbis){\n                    try {\n                        abiParams = this._getAbiParams(_abi, params);\n                        web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate(_abi.inputs, abiParams);\n                        methodAbi = _abi;\n                        break;\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                }\n                if (errors.length === arrayOfAbis.length) {\n                    throw new web3_validator__WEBPACK_IMPORTED_MODULE_6__.Web3ValidatorError(errors);\n                }\n            }\n            const methods = {\n                arguments: abiParams,\n                call: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    }),\n                send: (options)=>this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n                estimateGas: (options, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodEstimateGas({\n                            abi: methodAbi,\n                            params: abiParams,\n                            returnFormat,\n                            options\n                        });\n                    }),\n                encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(methodAbi, abiParams),\n                createAccessList: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    })\n            };\n            if (methodAbi.stateMutability === \"payable\") {\n                return methods;\n            }\n            return methods;\n        };\n    }\n    _contractMethodCall(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEthTxCallParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                const result = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.call)(this, tx, block, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n                return (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodReturn)(abi, result);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.innerError);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getCreateAccessListParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.createAccessList)(this, tx, block, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.innerError);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            input: undefined,\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        const transactionToSend = (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT, {\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false,\n            contractAbi: this._jsonInterface\n        });\n        // eslint-disable-next-line no-void\n        void transactionToSend.on(\"error\", (error)=>{\n            if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.innerError);\n            }\n        });\n        return transactionToSend;\n    }\n    _contractMethodDeploySend(abi, params, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT, {\n            transactionResolver: (receipt)=>{\n                if (receipt.status === BigInt(0)) {\n                    throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"code couldn't be stored\", receipt);\n                }\n                const newContract = this.clone();\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                newContract.options.address = receipt.contractAddress;\n                return newContract;\n            },\n            contractAbi: this._jsonInterface,\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false\n        });\n    }\n    _contractMethodEstimateGas({ abi, params, returnFormat, options, contractOptions }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEstimateGasParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n            });\n            return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.estimateGas)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.BlockTags.LATEST, returnFormat);\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _createContractEvent(abi, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        return (...params)=>{\n            var _a;\n            const { topics, fromBlock } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, params[0]);\n            const sub = new _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription({\n                address: this.options.address,\n                topics,\n                abi,\n                jsonInterface: this._jsonInterface\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                subscriptionManager: this.subscriptionManager,\n                returnFormat\n            });\n            if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(fromBlock)) {\n                // emit past events when fromBlock is defined\n                this.getPastEvents(abi.name, {\n                    fromBlock,\n                    topics\n                }, returnFormat).then((logs)=>{\n                    logs.forEach((log)=>sub.emit(\"data\", log));\n                }).catch((error)=>{\n                    sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to get past events.\", error));\n                });\n            }\n            (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch((error)=>{\n                sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to subscribe.\", error));\n            });\n            return sub;\n        };\n    }\n    subscribeToContextEvents(context) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const contractThis = this;\n        this.context = context;\n        if (contractThis.syncWithContext) {\n            context.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                contractThis.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/encoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ web3_eth__WEBPACK_IMPORTED_MODULE_3__.decodeEventABI),\n/* harmony export */   decodeMethodReturn: () => (/* binding */ decodeMethodReturn),\n/* harmony export */   encodeEventABI: () => (/* binding */ encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* binding */ encodeMethodABI)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\nconst encodeEventABI = ({ address }, event, options)=>{\n    var _a, _b;\n    const topics = options === null || options === void 0 ? void 0 : options.topics;\n    const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n    const opts = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.fromBlock)) {\n        opts.fromBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.toBlock)) {\n        opts.toBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (topics && Array.isArray(topics)) {\n        opts.topics = [\n            ...topics\n        ];\n    } else {\n        opts.topics = [];\n        // add event signature\n        if (event && !event.anonymous && ![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name)) {\n            opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeEventSignature)((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.jsonInterfaceMethodToString)(event)));\n        }\n        // add event topics (indexed arguments)\n        if (![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name) && event.inputs) {\n            for (const input of event.inputs){\n                if (!input.indexed) {\n                    continue;\n                }\n                const value = filter[input.name];\n                if (!value) {\n                    // eslint-disable-next-line no-null/no-null\n                    opts.topics.push(null);\n                    continue;\n                }\n                // TODO: https://github.com/ethereum/web3.js/issues/344\n                // TODO: deal properly with components\n                if (Array.isArray(value)) {\n                    opts.topics.push(value.map((v)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, v)));\n                } else if (input.type === \"string\") {\n                    opts.topics.push((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.keccak256)(value));\n                } else {\n                    opts.topics.push((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, value));\n                }\n            }\n        }\n    }\n    if (!opts.topics.length) delete opts.topics;\n    if (address) {\n        opts.address = address.toLowerCase();\n    }\n    return opts;\n};\nconst encodeMethodABI = (abi, args, deployData)=>{\n    const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;\n    if (inputLength !== args.length) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);\n    }\n    const params = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameters)(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace(\"0x\", \"\");\n    if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.isAbiConstructorFragment)(abi)) {\n        if (!deployData) throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(\"The contract has no contract data option set. This is necessary to append the constructor parameters.\");\n        if (!deployData.startsWith(\"0x\")) {\n            return `0x${deployData}${params}`;\n        }\n        return `${deployData}${params}`;\n    }\n    return `${(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionSignature)(abi)}${params}`;\n};\nconst decodeMethodReturn = (abi, returnValues)=>{\n    // If it was constructor then we need to return contract address\n    if (abi.type === \"constructor\") {\n        return returnValues;\n    }\n    if (!returnValues) {\n        // Using \"null\" value intentionally to match legacy behavior\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;\n    if (!abi.outputs) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const result = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.decodeParameters)([\n        ...abi.outputs\n    ], value);\n    if (result.__length__ === 1) {\n        return result[0];\n    }\n    return result;\n}; //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract),\n/* harmony export */   LogsSubscription: () => (/* reexport safe */ _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__.LogsSubscription),\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI),\n/* harmony export */   decodeMethodReturn: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMethodReturn),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeMethodABI)\n/* harmony export */ });\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * The `web3.eth.Contract` object makes it easy to interact with smart contracts on the Ethereum blockchain.\n * When you create a new contract object you give it the JSON interface of the respective smart contract and\n * web3 will auto convert all calls into low level ABI calls over RPC for you.\n * This allows you to interact with smart contracts as if they were JavaScript objects.\n *\n * To use it standalone:\n *\n * ```ts\n * const Contract = require('web3-eth-contract');\n *\n * // set provider for all later instances to use\n * Contract.setProvider('ws://localhost:8546');\n *\n * const contract = new Contract(jsonInterface, address);\n *\n * contract.methods.somFunc().send({from: ....})\n * .on('receipt', function(){\n *    ...\n * });\n * ```\n */ /**\n * This comment _supports3_ [Markdown](https://marked.js.org/)\n */ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQkMsR0FDRDs7Q0FFQyxHQUN3QztBQUNYO0FBQ0E7QUFDUTtBQUNYO0FBQzNCLGlFQUFlQSxrREFBUUEsRUFBQyxDQUN4QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1jb250cmFjdC9saWIvZXNtL2luZGV4LmpzPzM0NjkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIFRoZSBgd2ViMy5ldGguQ29udHJhY3RgIG9iamVjdCBtYWtlcyBpdCBlYXN5IHRvIGludGVyYWN0IHdpdGggc21hcnQgY29udHJhY3RzIG9uIHRoZSBFdGhlcmV1bSBibG9ja2NoYWluLlxuICogV2hlbiB5b3UgY3JlYXRlIGEgbmV3IGNvbnRyYWN0IG9iamVjdCB5b3UgZ2l2ZSBpdCB0aGUgSlNPTiBpbnRlcmZhY2Ugb2YgdGhlIHJlc3BlY3RpdmUgc21hcnQgY29udHJhY3QgYW5kXG4gKiB3ZWIzIHdpbGwgYXV0byBjb252ZXJ0IGFsbCBjYWxscyBpbnRvIGxvdyBsZXZlbCBBQkkgY2FsbHMgb3ZlciBSUEMgZm9yIHlvdS5cbiAqIFRoaXMgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIHNtYXJ0IGNvbnRyYWN0cyBhcyBpZiB0aGV5IHdlcmUgSmF2YVNjcmlwdCBvYmplY3RzLlxuICpcbiAqIFRvIHVzZSBpdCBzdGFuZGFsb25lOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBDb250cmFjdCA9IHJlcXVpcmUoJ3dlYjMtZXRoLWNvbnRyYWN0Jyk7XG4gKlxuICogLy8gc2V0IHByb3ZpZGVyIGZvciBhbGwgbGF0ZXIgaW5zdGFuY2VzIHRvIHVzZVxuICogQ29udHJhY3Quc2V0UHJvdmlkZXIoJ3dzOi8vbG9jYWxob3N0Ojg1NDYnKTtcbiAqXG4gKiBjb25zdCBjb250cmFjdCA9IG5ldyBDb250cmFjdChqc29uSW50ZXJmYWNlLCBhZGRyZXNzKTtcbiAqXG4gKiBjb250cmFjdC5tZXRob2RzLnNvbUZ1bmMoKS5zZW5kKHtmcm9tOiAuLi4ufSlcbiAqIC5vbigncmVjZWlwdCcsIGZ1bmN0aW9uKCl7XG4gKiAgICAuLi5cbiAqIH0pO1xuICogYGBgXG4gKi9cbi8qKlxuICogVGhpcyBjb21tZW50IF9zdXBwb3J0czNfIFtNYXJrZG93bl0oaHR0cHM6Ly9tYXJrZWQuanMub3JnLylcbiAqL1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tICcuL2NvbnRyYWN0LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW5jb2RpbmcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb250cmFjdC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvZ19zdWJzY3JpcHRpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBDb250cmFjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJDb250cmFjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/log_subscription.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsSubscription: () => (/* binding */ LogsSubscription)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n/**\n * LogSubscription to be used to subscribe to events logs.\n *\n * Following events are supported and can be accessed with either {@link LogsSubscription.once} or ${@link LogsSubscription.on} methods.\n *\n * - **connected**: Emitted when the subscription is connected.\n * - **data**: Fires on each incoming event with the event object as argument.\n * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.\n * - **error**: Fires on each error.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent({\n *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n *   fromBlock: 0\n * });\n *\n * subscription.on(\"connected\", function(subscriptionId){\n *   console.log(subscriptionId);\n * });\n *\n * subscription.on('data', function(event){\n *   console.log(event); // same results as the optional callback above\n * });\n *\n * subscription.on('changed', function(event){\n *   // remove event from local database\n * })\n *\n * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n *   ...\n * });\n *\n * // event output example\n * > {\n *   returnValues: {\n *       myIndexedParam: 20,\n *       myOtherIndexedParam: '0x123456789...',\n *       myNonIndexParam: 'My String'\n *   },\n *   raw: {\n *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n *   },\n *   event: 'MyEvent',\n *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   logIndex: 0,\n *   transactionIndex: 0,\n *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   blockNumber: 1234,\n *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n * }\n * ```\n */ class LogsSubscription extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Subscription {\n    constructor(args, options){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        super(args, options);\n        this.address = args.address;\n        this.topics = args.topics;\n        this.abi = args.abi;\n        this.jsonInterface = args.jsonInterface;\n    }\n    _buildSubscriptionParams() {\n        return [\n            \"logs\",\n            {\n                address: this.address,\n                topics: this.topics\n            }\n        ];\n    }\n    formatSubscriptionResult(data) {\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI)(this.abi, data, this.jsonInterface, super.returnFormat);\n    }\n} //# sourceMappingURL=log_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9sb2dfc3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUM2QztBQUNIO0FBQzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFEQyxHQUNNLE1BQU1FLHlCQUF5QkYsdURBQWdCQTtJQUNsREcsWUFBWUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDdkIsaUVBQWlFO1FBQ2pFLEtBQUssQ0FBQ0QsTUFBTUM7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR0YsS0FBS0UsT0FBTztRQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR0gsS0FBS0csTUFBTTtRQUN6QixJQUFJLENBQUNDLEdBQUcsR0FBR0osS0FBS0ksR0FBRztRQUNuQixJQUFJLENBQUNDLGFBQWEsR0FBR0wsS0FBS0ssYUFBYTtJQUMzQztJQUNBQywyQkFBMkI7UUFDdkIsT0FBTztZQUFDO1lBQVE7Z0JBQUVKLFNBQVMsSUFBSSxDQUFDQSxPQUFPO2dCQUFFQyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUFDO1NBQUU7SUFDbkU7SUFDQUkseUJBQXlCQyxJQUFJLEVBQUU7UUFDM0IsT0FBT1gsd0RBQWNBLENBQUMsSUFBSSxDQUFDTyxHQUFHLEVBQUVJLE1BQU0sSUFBSSxDQUFDSCxhQUFhLEVBQUUsS0FBSyxDQUFDSTtJQUNwRTtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9sb2dfc3Vic2NyaXB0aW9uLmpzP2NiNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5pbXBvcnQgeyBXZWIzU3Vic2NyaXB0aW9uIH0gZnJvbSAnd2ViMy1jb3JlJztcbmltcG9ydCB7IGRlY29kZUV2ZW50QUJJIH0gZnJvbSAnd2ViMy1ldGgnO1xuLyoqXG4gKiBMb2dTdWJzY3JpcHRpb24gdG8gYmUgdXNlZCB0byBzdWJzY3JpYmUgdG8gZXZlbnRzIGxvZ3MuXG4gKlxuICogRm9sbG93aW5nIGV2ZW50cyBhcmUgc3VwcG9ydGVkIGFuZCBjYW4gYmUgYWNjZXNzZWQgd2l0aCBlaXRoZXIge0BsaW5rIExvZ3NTdWJzY3JpcHRpb24ub25jZX0gb3IgJHtAbGluayBMb2dzU3Vic2NyaXB0aW9uLm9ufSBtZXRob2RzLlxuICpcbiAqIC0gKipjb25uZWN0ZWQqKjogRW1pdHRlZCB3aGVuIHRoZSBzdWJzY3JpcHRpb24gaXMgY29ubmVjdGVkLlxuICogLSAqKmRhdGEqKjogRmlyZXMgb24gZWFjaCBpbmNvbWluZyBldmVudCB3aXRoIHRoZSBldmVudCBvYmplY3QgYXMgYXJndW1lbnQuXG4gKiAtICoqY2hhbmdlZCoqOiBGaXJlcyBvbiBlYWNoIGV2ZW50IHdoaWNoIHdhcyByZW1vdmVkIGZyb20gdGhlIGJsb2NrY2hhaW4uIFRoZSBldmVudCB3aWxsIGhhdmUgdGhlIGFkZGl0aW9uYWwgcHJvcGVydHkgYHJlbW92ZWQ6IHRydWVgLlxuICogLSAqKmVycm9yKio6IEZpcmVzIG9uIGVhY2ggZXJyb3IuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGF3YWl0IG15Q29udHJhY3QuZXZlbnRzLk15RXZlbnQoe1xuICogICBmaWx0ZXI6IHtteUluZGV4ZWRQYXJhbTogWzIwLDIzXSwgbXlPdGhlckluZGV4ZWRQYXJhbTogJzB4MTIzNDU2Nzg5Li4uJ30sIC8vIFVzaW5nIGFuIGFycmF5IG1lYW5zIE9SOiBlLmcuIDIwIG9yIDIzXG4gKiAgIGZyb21CbG9jazogMFxuICogfSk7XG4gKlxuICogc3Vic2NyaXB0aW9uLm9uKFwiY29ubmVjdGVkXCIsIGZ1bmN0aW9uKHN1YnNjcmlwdGlvbklkKXtcbiAqICAgY29uc29sZS5sb2coc3Vic2NyaXB0aW9uSWQpO1xuICogfSk7XG4gKlxuICogc3Vic2NyaXB0aW9uLm9uKCdkYXRhJywgZnVuY3Rpb24oZXZlbnQpe1xuICogICBjb25zb2xlLmxvZyhldmVudCk7IC8vIHNhbWUgcmVzdWx0cyBhcyB0aGUgb3B0aW9uYWwgY2FsbGJhY2sgYWJvdmVcbiAqIH0pO1xuICpcbiAqIHN1YnNjcmlwdGlvbi5vbignY2hhbmdlZCcsIGZ1bmN0aW9uKGV2ZW50KXtcbiAqICAgLy8gcmVtb3ZlIGV2ZW50IGZyb20gbG9jYWwgZGF0YWJhc2VcbiAqIH0pXG4gKlxuICogc3Vic2NyaXB0aW9uLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycm9yLCByZWNlaXB0KSB7IC8vIElmIHRoZSB0cmFuc2FjdGlvbiB3YXMgcmVqZWN0ZWQgYnkgdGhlIG5ldHdvcmsgd2l0aCBhIHJlY2VpcHQsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHdpbGwgYmUgdGhlIHJlY2VpcHQuXG4gKiAgIC4uLlxuICogfSk7XG4gKlxuICogLy8gZXZlbnQgb3V0cHV0IGV4YW1wbGVcbiAqID4ge1xuICogICByZXR1cm5WYWx1ZXM6IHtcbiAqICAgICAgIG15SW5kZXhlZFBhcmFtOiAyMCxcbiAqICAgICAgIG15T3RoZXJJbmRleGVkUGFyYW06ICcweDEyMzQ1Njc4OS4uLicsXG4gKiAgICAgICBteU5vbkluZGV4UGFyYW06ICdNeSBTdHJpbmcnXG4gKiAgIH0sXG4gKiAgIHJhdzoge1xuICogICAgICAgZGF0YTogJzB4N2Y5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDc5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDdjMmMyZWI3YjExYTkxMzg1JyxcbiAqICAgICAgIHRvcGljczogWycweGZkNDNhZGUxYzA5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDdjMmMyZWI3YjExYTkxZmZkZDU3YTdhZjY2YWI0ZWFkNycsICcweDdmOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3OWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MTM4NSddXG4gKiAgIH0sXG4gKiAgIGV2ZW50OiAnTXlFdmVudCcsXG4gKiAgIHNpZ25hdHVyZTogJzB4ZmQ0M2FkZTFjMDlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkN2MyYzJlYjdiMTFhOTFmZmRkNTdhN2FmNjZhYjRlYWQ3JyxcbiAqICAgbG9nSW5kZXg6IDAsXG4gKiAgIHRyYW5zYWN0aW9uSW5kZXg6IDAsXG4gKiAgIHRyYW5zYWN0aW9uSGFzaDogJzB4N2Y5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDc5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDdjMmMyZWI3YjExYTkxMzg1JyxcbiAqICAgYmxvY2tIYXNoOiAnMHhmZDQzYWRlMWMwOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MWZmZGQ1N2E3YWY2NmFiNGVhZDcnLFxuICogICBibG9ja051bWJlcjogMTIzNCxcbiAqICAgYWRkcmVzczogJzB4ZGUwQjI5NTY2OWE5RkQ5M2Q1RjI4RDlFYzg1RTQwZjRjYjY5N0JBZSdcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgTG9nc1N1YnNjcmlwdGlvbiBleHRlbmRzIFdlYjNTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgc3VwZXIoYXJncywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFyZ3MuYWRkcmVzcztcbiAgICAgICAgdGhpcy50b3BpY3MgPSBhcmdzLnRvcGljcztcbiAgICAgICAgdGhpcy5hYmkgPSBhcmdzLmFiaTtcbiAgICAgICAgdGhpcy5qc29uSW50ZXJmYWNlID0gYXJncy5qc29uSW50ZXJmYWNlO1xuICAgIH1cbiAgICBfYnVpbGRTdWJzY3JpcHRpb25QYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBbJ2xvZ3MnLCB7IGFkZHJlc3M6IHRoaXMuYWRkcmVzcywgdG9waWNzOiB0aGlzLnRvcGljcyB9XTtcbiAgICB9XG4gICAgZm9ybWF0U3Vic2NyaXB0aW9uUmVzdWx0KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUV2ZW50QUJJKHRoaXMuYWJpLCBkYXRhLCB0aGlzLmpzb25JbnRlcmZhY2UsIHN1cGVyLnJldHVybkZvcm1hdCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nX3N1YnNjcmlwdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiV2ViM1N1YnNjcmlwdGlvbiIsImRlY29kZUV2ZW50QUJJIiwiTG9nc1N1YnNjcmlwdGlvbiIsImNvbnN0cnVjdG9yIiwiYXJncyIsIm9wdGlvbnMiLCJhZGRyZXNzIiwidG9waWNzIiwiYWJpIiwianNvbkludGVyZmFjZSIsIl9idWlsZFN1YnNjcmlwdGlvblBhcmFtcyIsImZvcm1hdFN1YnNjcmlwdGlvblJlc3VsdCIsImRhdGEiLCJyZXR1cm5Gb3JtYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/  //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ1UsQ0FDVixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1jb250cmFjdC9saWIvZXNtL3R5cGVzLmpzP2FmMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCreateAccessListParams: () => (/* binding */ getCreateAccessListParams),\n/* harmony export */   getEstimateGasParams: () => (/* binding */ getEstimateGasParams),\n/* harmony export */   getEthTxCallParams: () => (/* binding */ getEthTxCallParams),\n/* harmony export */   getSendTxParams: () => (/* binding */ getSendTxParams),\n/* harmony export */   isContractInitOptions: () => (/* reexport safe */ web3_utils__WEBPACK_IMPORTED_MODULE_1__.isContractInitOptions),\n/* harmony export */   isWeb3ContractContext: () => (/* binding */ isWeb3ContractContext)\n/* harmony export */ });\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill)=>{\n    var _a, _b;\n    const tx = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.data) || dataInputFill === \"both\") {\n        tx.data = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.input) || dataInputFill === \"both\") {\n        tx.input = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n    }\n    // if input and data is empty, use web3config default\n    if ((0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.input) && (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.data)) {\n        tx[dataInputFill] = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params);\n    }\n    return {\n        data: tx.data,\n        input: tx.input\n    };\n};\nconst getSendTxParams = ({ abi, params, options, contractOptions })=>{\n    var _a, _b, _c;\n    const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n    if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEthTxCallParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEstimateGasParams = ({ abi, params, options, contractOptions })=>{\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\n\nconst isWeb3ContractContext = (options)=>typeof options === \"object\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(options) && Object.keys(options).length !== 0 && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isContractInitOptions)(options);\nconst getCreateAccessListParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n}; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\n");

/***/ })

};
;